#include "stm32f0xx.h"
#define BUFFER_SIZE 256
uint16_t adc_buffer[BUFFER_SIZE];
void SystemClock_Config(void);
void GPIO_Init(void);
void ADC_Init(void);
void USART_Init(void);
void DMA_Init(void);
int main(void) {
    SystemClock_Config();
    GPIO_Init();
    ADC_Init();
    USART_Init();
    DMA_Init();
    // Start ADC
    ADC1->CR |= ADC_CR_ADSTART;
    while (1) {
        // Main loop is empty as DMA handles the data transfer
    }
}
void SystemClock_Config(void) {
    // Set system clock to 48 MHz using HSI
    RCC->CR |= RCC_CR_HSION;
    while (!(RCC->CR & RCC_CR_HSIRDY));
    RCC->CFGR |= RCC_CFGR_SW_HSI;
}
void GPIO_Init(void) {
    // Enable GPIOA clock
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
    // PA0 (ADC input), PA2 (USART2 TX)
    GPIOA->MODER |= GPIO_MODER_MODER0 | GPIO_MODER_MODER2_1;  // Analog for PA0, Alt Func for PA2
    GPIOA->AFR[0] |= 0x01 << GPIO_AFRL_AFRL2_Pos;            // AF1 for PA2 (USART2 TX)
}
void ADC_Init(void) {
    // Enable ADC clock
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
    // Calibrate ADC
    ADC1->CR &= ~ADC_CR_ADEN;
    ADC1->CR |= ADC_CR_ADCAL;
    while (ADC1->CR & ADC_CR_ADCAL);
    // Configure ADC
    ADC1->CHSELR |= ADC_CHSELR_CHSEL0;  // Channel 0 (PA0)
    ADC1->CFGR1 |= ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG;  // DMA Circular Mode
    ADC1->SMPR |= ADC_SMPR_SMP_2;      // Sampling time: 239.5 cycles
    // Enable ADC
    ADC1->CR |= ADC_CR_ADEN;
    while (!(ADC1->ISR & ADC_ISR_ADRDY));
}
void USART_Init(void) {
    // Enable USART2 clock
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
    // Configure USART2
    USART2->BRR = SystemCoreClock / 9600;  // Baud rate 9600
    USART2->CR1 |= USART_CR1_TE | USART_CR1_UE;  // Enable TX and USART
    while (!(USART2->ISR & USART_ISR_TEACK));
}
void DMA_Init(void) {
    // Enable DMA clock
    RCC->AHBENR |= RCC_AHBENR_DMA1EN;
    // DMA1: ADC to Memory
    DMA1_Channel1->CPAR = (uint32_t)&ADC1->DR;
    DMA1_Channel1->CMAR = (uint32_t)adc_buffer;
    DMA1_Channel1->CNDTR = BUFFER_SIZE;
    DMA1_Channel1->CCR = DMA_CCR_MINC | DMA_CCR_CIRC | DMA_CCR_TCIE | DMA_CCR_EN;
    // DMA2: Memory to USART
    DMA1_Channel2->CPAR = (uint32_t)&USART2->TDR;
    DMA1_Channel2->CMAR = (uint32_t)adc_buffer;
    DMA1_Channel2->CNDTR = BUFFER_SIZE;
    DMA1_Channel2->CCR = DMA_CCR_MINC | DMA_CCR_DIR | DMA_CCR_TCIE | DMA_CCR_EN;

    // Enable DMA interrupts
    NVIC_EnableIRQ(DMA1_Channel1_IRQn);
    NVIC_EnableIRQ(DMA1_Channel2_IRQn);
}
void DMA1_Channel1_IRQHandler(void) {
    if (DMA1->ISR & DMA_ISR_TCIF1) {
        DMA1->IFCR |= DMA_IFCR_CTCIF1;  // Clear interrupt flag
    }
}
void DMA1_Channel2_IRQHandler(void) {
    if (DMA1->ISR & DMA_ISR_TCIF2) {
        DMA1->IFCR |= DMA_IFCR_CTCIF2;  // Clear interrupt flag
    }
}
